{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"ProductType": {
				"properties": {
					"name": {
						"type": "string"
					},
					"price": {
						"type": "number",
						"format": "double"
					},
					"category": {
						"type": "string"
					},
					"stock": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"price",
					"category",
					"stock"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProductResponse": {
				"properties": {
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/ProductType"
					}
				},
				"required": [
					"message",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProductCreateRequest": {
				"properties": {
					"name": {
						"type": "string"
					},
					"price": {
						"type": "number",
						"format": "double"
					},
					"category": {
						"type": "string"
					},
					"stock": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"price",
					"category",
					"stock"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginationType": {
				"properties": {
					"data": {
						"items": {
							"$ref": "#/components/schemas/ProductType"
						},
						"type": "array"
					},
					"totalItem": {
						"type": "number",
						"format": "double"
					},
					"totalPage": {
						"type": "number",
						"format": "double"
					},
					"currentPage": {
						"type": "number",
						"format": "double"
					},
					"limit": {
						"type": "number",
						"format": "double"
					},
					"skip": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"data",
					"totalItem",
					"totalPage",
					"currentPage",
					"limit",
					"skip"
				],
				"type": "object",
				"additionalProperties": false
			},
			"QueryType": {
				"properties": {
					"filter": {
						"type": "string"
					},
					"sort": {
						"type": "string"
					},
					"limit": {
						"anyOf": [
							{
								"type": "number",
								"format": "double"
							},
							{
								"type": "number",
								"enum": [
									0
								]
							}
						]
					},
					"page": {
						"anyOf": [
							{
								"type": "number",
								"format": "double"
							},
							{
								"type": "number",
								"enum": [
									0
								]
							}
						]
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"SignUpRequest": {
				"properties": {
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				},
				"required": [
					"username",
					"password",
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChallengeNameType": {
				"type": "string",
				"enum": [
					"ADMIN_NO_SRP_AUTH",
					"CUSTOM_CHALLENGE",
					"DEVICE_PASSWORD_VERIFIER",
					"DEVICE_SRP_AUTH",
					"EMAIL_OTP",
					"MFA_SETUP",
					"NEW_PASSWORD_REQUIRED",
					"PASSWORD_VERIFIER",
					"SELECT_MFA_TYPE",
					"SMS_MFA",
					"SOFTWARE_TOKEN_MFA"
				]
			},
			"Record_string.string_": {
				"properties": {},
				"additionalProperties": {
					"type": "string"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"NewDeviceMetadataType": {
				"description": "<p>The new device metadata type.</p>",
				"properties": {
					"DeviceKey": {
						"type": "string",
						"description": "<p>The device key.</p>"
					},
					"DeviceGroupKey": {
						"type": "string",
						"description": "<p>The device group key.</p>"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AuthenticationResultType": {
				"description": "<p>The authentication result.</p>",
				"properties": {
					"AccessToken": {
						"type": "string",
						"description": "<p>A valid access token that Amazon Cognito issued to the user who you want to\n            authenticate.</p>"
					},
					"ExpiresIn": {
						"type": "number",
						"format": "double",
						"description": "<p>The expiration period of the authentication result in seconds.</p>"
					},
					"TokenType": {
						"type": "string",
						"description": "<p>The token type.</p>"
					},
					"RefreshToken": {
						"type": "string",
						"description": "<p>The refresh token.</p>"
					},
					"IdToken": {
						"type": "string",
						"description": "<p>The ID token.</p>"
					},
					"NewDeviceMetadata": {
						"$ref": "#/components/schemas/NewDeviceMetadataType",
						"description": "<p>The new device metadata from an authentication result.</p>"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ResponseMetadata": {
				"properties": {
					"httpStatusCode": {
						"type": "number",
						"format": "double",
						"description": "The status code of the last HTTP response received for this operation."
					},
					"requestId": {
						"type": "string",
						"description": "A unique identifier for the last request sent for this operation. Often\nrequested by AWS service teams to aid in debugging."
					},
					"extendedRequestId": {
						"type": "string",
						"description": "A secondary identifier for the last request sent. Used for debugging."
					},
					"cfId": {
						"type": "string",
						"description": "A tertiary identifier for the last request sent. Used for debugging."
					},
					"attempts": {
						"type": "number",
						"format": "double",
						"description": "The number of times this operation was attempted."
					},
					"totalRetryDelay": {
						"type": "number",
						"format": "double",
						"description": "The total amount of time (in milliseconds) that was spent waiting between\nretry attempts."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"InitiateAuthCommandOutput": {
				"properties": {
					"ChallengeName": {
						"$ref": "#/components/schemas/ChallengeNameType",
						"description": "<p>The name of the challenge that you're responding to with this call. This name is\n            returned in the <code>InitiateAuth</code> response if you must pass another\n            challenge.</p>\n         <p>Valid values include the following:</p>\n         <note>\n            <p>All of the following challenges require <code>USERNAME</code> and\n                    <code>SECRET_HASH</code> (if applicable) in the parameters.</p>\n         </note>\n         <ul>\n            <li>\n               <p>\n                  <code>SMS_MFA</code>: Next challenge is to supply an\n                    <code>SMS_MFA_CODE</code>that your user pool delivered\n                    in an SMS message.</p>\n            </li>\n            <li>\n               <p>\n                  <code>EMAIL_OTP</code>: Next challenge is to supply an\n                    <code>EMAIL_OTP_CODE</code> that your user pool delivered\n                    in an email message.</p>\n            </li>\n            <li>\n               <p>\n                  <code>PASSWORD_VERIFIER</code>: Next challenge is to supply\n                        <code>PASSWORD_CLAIM_SIGNATURE</code>,\n                        <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after\n                    the client-side SRP calculations.</p>\n            </li>\n            <li>\n               <p>\n                  <code>CUSTOM_CHALLENGE</code>: This is returned if your custom authentication\n                    flow determines that the user should pass another challenge before tokens are\n                    issued.</p>\n            </li>\n            <li>\n               <p>\n                  <code>DEVICE_SRP_AUTH</code>: If device tracking was activated on your user\n                    pool and the previous challenges were passed, this challenge is returned so that\n                    Amazon Cognito can start tracking this device.</p>\n            </li>\n            <li>\n               <p>\n                  <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to\n                        <code>PASSWORD_VERIFIER</code>, but for devices only.</p>\n            </li>\n            <li>\n               <p>\n                  <code>NEW_PASSWORD_REQUIRED</code>: For users who are required to change their\n                    passwords after successful first login. </p>\n               <p>Respond to this challenge with <code>NEW_PASSWORD</code> and any required\n                    attributes that Amazon Cognito returned in the <code>requiredAttributes</code> parameter.\n                    You can also set values for attributes that aren't required by your user pool\n                    and that your app client can write. For more information, see <a href=\"https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RespondToAuthChallenge.html\">RespondToAuthChallenge</a>.</p>\n               <note>\n                  <p>In a <code>NEW_PASSWORD_REQUIRED</code> challenge response, you can't modify a required attribute that already has a value.\nIn <code>RespondToAuthChallenge</code>, set a value for any keys that Amazon Cognito returned in the <code>requiredAttributes</code> parameter,\nthen use the <code>UpdateUserAttributes</code> API operation to modify the value of any additional attributes.</p>\n               </note>\n            </li>\n            <li>\n               <p>\n                  <code>MFA_SETUP</code>: For users who are required to setup an MFA factor\n                    before they can sign in. The MFA types activated for the user pool will be\n                    listed in the challenge parameters <code>MFAS_CAN_SETUP</code> value. </p>\n               <p> To set up software token MFA, use the session returned here from\n                        <code>InitiateAuth</code> as an input to\n                    <code>AssociateSoftwareToken</code>. Use the session returned by\n                        <code>VerifySoftwareToken</code> as an input to\n                        <code>RespondToAuthChallenge</code> with challenge name\n                        <code>MFA_SETUP</code> to complete sign-in. To set up SMS MFA, an\n                    administrator should help the user to add a phone number to their account, and\n                    then the user should call <code>InitiateAuth</code> again to restart\n                    sign-in.</p>\n            </li>\n         </ul>"
					},
					"Session": {
						"type": "string",
						"description": "<p>The session that should pass both ways in challenge-response calls to the service. If\n            the caller must pass another challenge, they return a session with other challenge\n            parameters. This session should be passed as it is to the next\n                <code>RespondToAuthChallenge</code> API call.</p>"
					},
					"ChallengeParameters": {
						"$ref": "#/components/schemas/Record_string.string_",
						"description": "<p>The challenge parameters. These are returned in the <code>InitiateAuth</code> response\n            if you must pass another challenge. The responses in this parameter should be used to\n            compute inputs to the next call (<code>RespondToAuthChallenge</code>). </p>\n         <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if\n            applicable).</p>"
					},
					"AuthenticationResult": {
						"$ref": "#/components/schemas/AuthenticationResultType",
						"description": "<p>The result of the authentication response. This result is only returned if the caller\n            doesn't need to pass another challenge. If the caller does need to pass another\n            challenge before it gets tokens, <code>ChallengeName</code>,\n                <code>ChallengeParameters</code>, and <code>Session</code> are returned.</p>"
					},
					"$metadata": {
						"$ref": "#/components/schemas/ResponseMetadata",
						"description": "Metadata pertaining to this request."
					}
				},
				"required": [
					"$metadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SignInRequest": {
				"properties": {
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"username",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ConfirmSignUpRequest": {
				"properties": {
					"username": {
						"type": "string"
					},
					"confirmationCode": {
						"type": "string"
					}
				},
				"required": [
					"username",
					"confirmationCode"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "tsoa-express-api",
		"version": "1.0.0",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "MyDragon168 ",
			"email": "cambodiagames3@gmail.com"
		}
	},
	"paths": {
		"/v1/products": {
			"post": {
				"operationId": "CreateItem",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProductResponse"
								}
							}
						}
					},
					"201": {
						"description": "Created Success"
					}
				},
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProductCreateRequest"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetAllData",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginationType"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "filter",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "sort",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {}
					}
				]
			}
		},
		"/v1/products/{id}": {
			"get": {
				"operationId": "GetById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProductType"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "Function",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProductType"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProductType"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteById",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/auth/signup": {
			"post": {
				"operationId": "SignUp",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SignUpRequest"
							}
						}
					}
				}
			}
		},
		"/auth/signin": {
			"post": {
				"operationId": "SignIn",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InitiateAuthCommandOutput"
								}
							}
						}
					}
				},
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SignInRequest"
							}
						}
					}
				}
			}
		},
		"/auth/confirm-signup": {
			"post": {
				"operationId": "ConfirmSignUp",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ConfirmSignUpRequest"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}